CMPT 453 - Assignment 2
Woody Morrice - wam553 - 11071060

Parts 1&2: RMI and gRPC

    NOTE: Several parts of this report are identical to assignment 2 because
    the functionality and parts of the implementation in this assignment
    are the same.

    Additional Note: I had some trouble manually compiling the gRPC portion,
    so I elected to use Maven to simplify the process. As an unfortunate
    side effect, that part of the assignment is incredibly bloated and
    takes a few more seconds to start up. If I had a bit more time I would
    have dealt with that, but at this point it runs fine and does what it
    needs to do, so I think that's good enough.

    One more note: The source code for part 2 is located in
    gRPC/src/main/java/. The wmfx subfolder contains the java source code
    and the proto subfolder contains the proto files.

    How to Run the Code
    ===================

    Requires docker desktop (or some other way to run docker-compose).
    Extract the .zip file.

    Part 1: RMI

    Part 2: gRPC

    Extract the .zip file and navigate into the a2 folder. Enter the following
    commands into your terminal:
    docker-compose up -d    // starts the docker network

    In the same terminal, to attach to the first client:
    docker attach client1

    In a second terminal, to attach to the second client:
    docker attach client2

    Then you can begin entering the commands detailed in the above section.

    Requirements Fulfilled
    ======================

    All functionality implemented. Server allows clients to create chat rooms,
    list all existing chat rooms, join a room, and leave the chat room that they
    are currently in.
    Client interface is simple. There are four commands:
        create <room name> -- creates a new chat room
        join <room name> -- joins an existing chat room
        list -- lists existing chat rooms
        leave -- leaves the current chat room
    Clients can send message by simply typing a message and pressing enter when
    they are in a room. When a client attempts to join another room when they
    are already in a room, they join the new room and leave the old one. Clients
    can join multiple rooms at the same time by running another instance of the
    executable in a different terminal window.
    All contents of a room prior to a client joining will be displayed to the
    client when they join a room. New messages in the room are displayed to the
    client immediately after the server receives them.


Part 3: Testing

    Commands
    ========

    "create" Tests:
        Creating a new room with a unique name:
            Input: create room1
            Expected Result: successful room creation
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)

        Creating a room with the same name as a room that already exists:
            Input: create room1
            Expected Result: Server returns a message indicating that a room by
                that name already exists.
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)

    "list" Tests:
        Listing all rooms when no rooms exist:
            Input: list
            Expected Result: Server returns a message indicating that no rooms
                currently exist.
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)

        Listing all rooms when one/many rooms exist:
            Input: list
            Expected Result: Server returns a list of names of all rooms that
                currently exist.
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)

    "join" Tests:
        Joining a room that does not exist:
            Input: join room1
            Expected Result: Server returns a message indicating that no room by
                that name currently exists.
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)

        Joining a room that exists:
            Input: join room1
            Expected Result: Server returns a log of all messages previously
                sent in the room.
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)

        Joining a room that exists when currently in a room:
            Input: join room2
            Expected Result: Server returns a log of all messages previously
                sent in the room.
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)

    "leave" Tests:
        Leaving while not currently in a room:
            Input: leave
            Expected Result: Server returns a message indicating that the client
                is not currently in a room.
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)

        Leaving while currently in a room:
            Input:
            Expected Result: Server indicates to the client that it has left the
                room, and sends a message to any other members of the room that
                the client has left.
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)

    Sending Messages Tests:
        Sending a message while not currently in a room:
            Input: hello
            Expected Result: Client indicates an invalid command, since messages
                cannot be sent unless the user is in a room.
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)

        Sending a message while in a room:
            Input: hello
            Expected Result: Server does not indicate anything to the client
            (silent success), and any other clients in the room are notified of
            the new message.
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)

        Sending a message that begins with a command while currently in a room:
            Input: list hello
            Expected Result: Any message that begins with a command will be
                interpreted as a command, and the associated command will be
                executed.
            Actual Result:
                Part 1 (RMI) - expected (pass)
                Part 2 (gRPC) - expected (pass)


    Other Testing
    =============

    If a client crashes when that user is in a room, the client does not leave
    the room properly and the server does not know that the client is gone. In
    that case, when the server notifies all clients in a room of a new incoming
    message, if the server cannot communicate with a client because of a crash
    or network issue, the server removes the client from the rooms roster and
    continues on.